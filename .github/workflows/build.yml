name: Build

env:
  ARTIFACT: SAM
  PACKAGES: ${{ github.workspace }}\.nuget\packages
  VERSION_PREFIX: 0.0.1
  VERSION_SUFFIX: alpha

on:
  workflow_call:
    inputs:
      is_release:
        description: 'True if this build is for a release, false otherwise'
        default: false
        type: boolean
      version-prefix:
        description: 'The version prefix (e.g. "1.0.0")'
        default: '0.0.1'
        required: false
        type: string
      version-suffix:
        description: 'The version suffix (e.g. "alpha")'
        default: ''
        required: false
        type: string
  workflow_dispatch:
  push:
    branches: [ "main", "master" ]
    tags-ignore:
      - v*
    paths-ignore:
      - 'resources/*'
      - 'README.md'
      - 'CHANGELOG.md'
      - '.gitignore'
      - '.gitattributes'
  pull_request:
    branches: [ "main", "master" ]

concurrency:
  group: ${{ github.workflow }}

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - id: cache-restore
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
    - name: Restore dependencies
      run: dotnet restore .\src\SAM_NoTests.slnf --packages ${{ env.PACKAGES }}
    - id: cache-save
      uses: actions/cache/save@v4
      if: steps.cache-restore.outputs.cache-hit != 'true'
      with:
        path: ${{ env.PACKAGES }}
        key: ${{ steps.cache-restore.outputs.cache-primary-key }}
    - name: Publish SAM
      run: dotnet publish .\src\SAM\SAM.csproj -o publish -c Release -a x86 --no-restore /p:VersionPrefix=${{ inputs.version-prefix || env.VERSION_PREFIX }} /p:VersionSuffix=${{ inputs.version-suffix || env.VERSION_SUFFIX }}
    - name: Publish SAM.Manager
      run: dotnet publish .\src\SAM.Manager\SAM.Manager.csproj -o publish_manager -c Release -a x86 --no-restore /p:VersionPrefix=${{ inputs.version-prefix || env.VERSION_PREFIX }} /p:VersionSuffix=${{ inputs.version-suffix || env.VERSION_SUFFIX }}
    - name: Stage Artifacts
      run: |
        $samDir = Get-Item publish | Select-Object -ExpandProperty FullName
        $samManagerDir = Get-Item publish_manager | Select-Object -ExpandProperty FullName

        cp $samManagerDir\* -Destination $samDir -Recurse -Force

        $stagedFiles = gci $samDir -Recurse -File | select -ExpandProperty FullName | Sort-Object

        Write-Host ""
        Write-Host "`nStaged Artifacts:`n" -ForegroundColor Cyan

        foreach ($stagedFile in $stagedFiles)
        {
          $relPath = [System.IO.Path]::GetRelativePath($stageDir, $stagedFile)
          $ext = [System.IO.Path]::GetExtension($stagedFile)

          if ($ext -eq '.exe') {
            Write-Host "- $relPath" -ForegroundColor Cyan
          }
          elseif ($ext -eq '.dll') {
            Write-Host "- $relPath" -ForegroundColor Magenta
          }
          elseif ($ext -eq '.pdb') {
            Write-Host "- $relPath" -ForegroundColor Green
          }
          elseif ($ext -eq '.json') {
            Write-Host "- $relPath" -ForegroundColor Blue
          }
          else {
            Write-Host "- $relPath"
          }
        }
    - name: Upload a Build Artifact
      id: artifact-upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ARTIFACT }}
        path: publish
        if-no-files-found: error
