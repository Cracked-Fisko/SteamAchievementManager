name: Build
run-name: Build ${{ github.event_name == 'workflow_call' && inputs.version || github.ref_name }} by ${{ github.actor }}

env:
  PACKAGES: ${{ github.workspace }}\.nuget\packages
  VERSION: 0.0.1

on:
  workflow_call:
    inputs:
      is_release:
        description: 'True if this build is for a release, false otherwise'
        default: false
        type: boolean
      version:
        description: 'The semantic version number (e.g. "2.0.1-beta")'
        default: '0.0.1'
        required: false
        type: string
    outputs:
      artifact-name:
        description: 'The name of the build artifact'
        value: ${{ jobs.build.outputs.artifact-name }}
  workflow_dispatch:
  push:
    branches: [ "main", "master" ]
    tags-ignore: [ 'v*' ]
    paths-ignore:
      - 'resources/*'
      - 'README.md'
      - 'CHANGELOG.md'
      - '.gitignore'
      - '.gitattributes'
  pull_request:
    branches: [ "main", "master" ]

concurrency:
  group: ${{ github.workflow }}

jobs:
  build:
    runs-on: self-hosted
    outputs:
      artifact-name: ${{ steps.set-vars.outputs.artifact-name }}

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: setup-dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      # ==== CACHE RESTORE ====

      # Linux/macOS: use native actions/cache
      - name: Restore NuGet cache (Linux/macOS)
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ${{ env.PACKAGES }}
          key: ${{ runner.os }}-nuget

      # Windows: pull down last runâ€™s tarball
      - name: Download NuGet cache (Windows)
        if: runner.os == 'Windows'
        uses: actions/download-artifact@v4
        with:
          name: nuget-cache
          path: .

      - name: Unpack NuGet cache (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir -p "${{ env.PACKAGES }}"
          tar.exe -xf nuget-cache.tar -C "${{ env.PACKAGES }}"

      # ==== DOTNET RESTORE ====

      - name: restore
        run: dotnet restore .\src\SAM.slnx --packages ${{ env.PACKAGES }}

      # ==== CACHE SAVE ====

      # Linux/macOS: save via actions/cache
      - name: Save NuGet cache (Linux/macOS)
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ${{ env.PACKAGES }}
          key: ${{ runner.os }}-nuget

      # Windows: re-package & upload for next run
      - name: Pack NuGet cache (Windows)
        if: runner.os == 'Windows'
        run: |
          tar.exe -cf nuget-cache.tar -C "${{ env.PACKAGES }}" .
      - name: Upload NuGet cache (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: nuget-cache
          path: nuget-cache.tar

      # ==== SET VARIABLES ====

      - id: set-vars
        name: set-vars
        run: |
          $now = Get-Date
          $longTs = $now.ToString('yyyy-MM-dd')
          $ts = $now.ToString('yy.MM.dd')
          $buildType = "${{ inputs.is_release && 'release' || 'debug' }}"
          $artifactName = $buildType -eq 'release'
            ? "SAM_${{ inputs.version }}"
            : [string]::Format('SAM_{0}_{1}.{2}', $buildType, $ts, '${{ github.run_number }}')
          $configuration = $buildType -eq 'release' ? 'Release' : 'Debug'

          echo "BUILD_DATE=$ts" >> $env:GITHUB_ENV
          echo "BUILD_DATE_LONG=$longTs" >> $env:GITHUB_ENV
          echo "BUILD_TYPE=$buildType" >> $env:GITHUB_ENV
          echo "CONFIGURATION=$configuration" >> $env:GITHUB_ENV
          echo "ARTIFACT_NAME=$artifactName" >> $env:GITHUB_ENV
          echo "artifact-name=$artifactName" >> $env:GITHUB_OUTPUT

      # ==== PUBLISH & UPLOAD ====

      - name: publish
        run: dotnet publish .\src\SAM\SAM.csproj -o publish -c ${{ env.CONFIGURATION }} -a x86 --no-restore /p:Version=${{ inputs.version || env.VERSION }}

      - name: stage-artifacts
        run: |
          $publishDir = (Get-Item publish).FullName
          gci $publishDir -Recurse -File | 
            Sort-Object Extension, FullName | 
            ForEach-Object {
              $rel = [IO.Path]::GetRelativePath($publishDir,$_.FullName)
              Write-Host "- $rel"
            }

      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: publish
          if-no-files-found: error
