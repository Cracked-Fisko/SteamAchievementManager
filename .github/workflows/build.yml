name: Build
run-name: Build ${{ github.event_name == 'workflow_call' && inputs.version || github.ref_name }} by ${{ github.actor }}

env:
  PACKAGES: ${{ github.workspace }}\.nuget\packages
  VERSION: 0.0.1
  # these are all set in the set-vars step
  ARTIFACT_NAME: ''
  BUILD_DATE: ''
  BUILD_DATE_LONG: ''
  BUILD_TYPE: ''
  CONFIGURATION: ''

on:
  workflow_call:
    inputs:
      is_release:
        description: 'True if this build is for a release, false otherwise'
        default: false
        type: boolean
      version:
        description: 'The semantic version number (e.g. "2.0.1-beta")'
        default: '0.0.1'
        required: false
        type: string
    outputs:
      artifact-name:
        description: 'The name of the build artifact'
        value: ${{ jobs.build.outputs.artifact-name }}
  workflow_dispatch:
  push:
    branches: [ "main", "master" ]
    tags-ignore:
      - v*
    paths-ignore:
      - 'resources/*'
      - 'README.md'
      - 'CHANGELOG.md'
      - '.gitignore'
      - '.gitattributes'
  pull_request:
    branches: [ "main", "master" ]

concurrency:
  group: ${{ github.workflow }}

jobs:
  build:
    runs-on: windows-latest
    outputs:
      artifact-name: ${{ steps.set-vars.outputs.artifact-name }}
    steps:
    - id: checkout
      name: checkout
      uses: actions/checkout@v4
    - id: setup-dotnet
      name: setup-dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - id: cache-restore
      name: cache-restore
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.PACKAGES }}
        key: ${{ runner.os }}-nuget
    - id: dotnet-restore
      name: restore
      run: dotnet restore .\src\SAM_NoTests.slnf --packages ${{ env.PACKAGES }}
    - id: cache-save
      name: cache-save
      uses: actions/cache/save@v4
      if: steps.cache-restore.outputs.cache-hit != 'true'
      with:
        path: ${{ env.PACKAGES }}
        key: ${{ steps.cache-restore.outputs.cache-primary-key }}
    - id: set-vars
      name: set-vars
      run: |
        $now = Get-Date
        $longTs = $now.ToString('yyyy-MM-dd')
        $ts = $now.ToString('yy.MM.dd')
        $buildType = "${{ inputs.is_release && 'release' || 'debug' }}"
        $artifactName = $buildType -eq 'release' ? "SAM_${{ inputs.version }}" : [string]::Format('SAM_{0}_{1}.{2}', $buildType, $ts, '${{ github.run_number }}')
        $configuration = $buildType -eq 'release' ? 'Release' : 'Debug'

        Write-Host "Build Date    : $($PSStyle.Foreground.BrightCyan)$longTs ($ts)$($PSStyle.Reset)"
        Write-Host "Build Type    : $($PSStyle.Foreground.BrightCyan)$buildType$($PSStyle.Reset)"
        Write-Host "Artifact Name : $($PSStyle.Foreground.BrightCyan)$artifactName$($PSStyle.Reset)"
        Write-Host "Configuration : $($PSStyle.Foreground.BrightCyan)$configuration$($PSStyle.Reset)"

        echo "BUILD_DATE=$ts" >> $env:GITHUB_ENV
        echo "BUILD_DATE_LONG=$longTs" >> $env:GITHUB_ENV
        echo "BUILD_TYPE=$buildType" >> $env:GITHUB_ENV
        echo "CONFIGURATION=$configuration" >> $env:GITHUB_ENV
        echo "ARTIFACT_NAME=$artifactName" >> $env:GITHUB_ENV

        echo "artifact-name=$artifactName" >> $env:GITHUB_OUTPUT
    - id: publish
      name: publish
      run: dotnet publish .\src\SAM\SAM.csproj -o publish -c ${{ env.CONFIGURATION }} -a x86 --no-restore /p:Version=${{ inputs.version || env.VERSION }}
    - id: stage-artifacts
      name: stage-artifacts
      run: |
        $publishDir = Get-Item publish | Select-Object -ExpandProperty FullName
        $stagedFiles = gci $publishDir -Recurse -File | Sort-Object Extension, FullName | select -ExpandProperty FullName

        Write-Host "`n$($PSStyle.Bold)Staged Artifacts$($PSStyle.BoldOff)`n"

        foreach ($stagedFile in $stagedFiles)
        {
          $relPath = [System.IO.Path]::GetRelativePath($publishDir, $stagedFile)
          $ext = [System.IO.Path]::GetExtension($stagedFile)

          $color = ''

          if ($ext -eq '.exe') { $color = $PSStyle.Foreground.BrightCyan }
          elseif ($ext -eq '.dll') { $color = $PSStyle.Foreground.BrightMagenta }
          elseif ($ext -eq '.pdb') { $color = $PSStyle.Foreground.BrightGreen }
          elseif ($ext -eq '.json' -or $ext -eq '.config') { $color = $PSStyle.Foreground.BrightBlue }
          else { $color = $PSStyle.Foreground.BrightWhite }

          Write-Host "- $color$relPath$($PSStyle.Reset)"
        }
    - id: artifact-upload
      name: upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: publish
        if-no-files-found: error
